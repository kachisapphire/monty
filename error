#include "monty.h"
/**
 *error - function to print error messages
 *@err_code: error codes to be orinted
 *(1) - argument is less than 2
 *(2) - file cannot be read
 *(3) - file contains invalid instruction
 *(4) - malloc fails
 *(5) - instruction not int for push
 *Return: void
 */
void error(int err_code, ...)
{
	va_list arg;
	char *codes;
	int num;

	va_start(arg, err_code);
	switch (err_code)
	{
		case 1:
			fprintf(stderr, "USAGE: monty file\n");
			break;
		case 2:
			fprintf(stderr, "Error: Can't open file %s\n", va_arg(arg, char *));
			break;
		case 3:
			num = va_arg(arg, int);
			codes = va_arg(arg, char *);
			fprintf(stderr, "L%d: unknown instruction %s\n", num, codes);
			break;
		case 4:
			fprintf(stderr, "Error: malloc failed\n");
			break;
		case 5:
			fprintf(stderr, "L%d: usage: push integer\n", va_arg(arg, int));
			break;
		default:
			break;
	}
	free_list();
	exit(EXIT_FAILURE);
}
/**
 *error2 - more error functions
 *@err_code: the errorcodes:
 *(6) - stack is emoty for pint
 *(7) - stack is empty for pop
 *(8) - stack too short
 *(9) - top element of stack is 0
 *Return: void
 */
void error2(int err_code, ...)
{
	va_list arg;
	char *codes;
	int num;

	va_start(arg, err_code);
	switch (err_code)
	{
		case 6:
			fprintf(stderr, "L%d: can't pint, stack empty\n", va_arg(arg, int));
			break;
		case 7:
			fprintf(stderr, "L%d: can't pop an empty stack\n", va_arg(arg, int));
			break;
		case 8:
			num = va_arg(ag, unsigned int);
			codes = va_arg(ag, char *);
			fprintf(stderr, "L%d: can't %s, stack too short\n", num, codes);
			break;
		case 9:
			fprintf(stderr, "L%d: division by zero\n", va_arg(arg, unsigned int));
			break;
		default:
			break;
	}
	free_list();
	exit(EXIT_FAILURE);
}
/**
 *error3 - more error function
 *@err_code: error codes to print:
 *(10) - numbernot on ASCII table
 *(11) - stack is rmpty for pchar
 *Return: void
 */
void error3(int err_code, ...)
{
	va_list arg;
	int num;

	va_start(arg, err_code);
	switch (err_code)
	{
		case 10:
			fprintf(stderr, "L%d: can't pchar, value out of range\n", num);
			break;
		case 11:
			fprintf(stderr, "L%d: can't pchar, stack empty\n", num);
			break;
		default:
			break;
	}
	free_list();
	exit(EXIT_FAILURE);
}
